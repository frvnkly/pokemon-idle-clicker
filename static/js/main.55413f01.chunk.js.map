{"version":3,"sources":["Pokemon.js","Selector.js","Trainer.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","data","onClick","className","src","sprites","front_default","alt","name","width","Selector","pokemon","select","map","p","key","id","Trainer","allPokemon","P","Pokedex","useState","species","setSpecies","fullyEvolved","level","setLevel","exp","setExp","useEffect","current","get","trainPokemon","a","newExp","newLevel","getPokemonSpeciesByName","currSpecies","resource","evolution_chain","url","evolutionChain","ptr","chain","evolves_to","length","getPokemonByName","nextEvolution","console","log","value","max","App","starters","setStarters","active","setActive","Map","fetchStarters","starterNames","Promise","all","s","useLayoutEffect","set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55413f01.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Pokemon.css';\n\nconst Pokemon = ({ data, onClick }) => {\n  return (\n    <img\n      className='sprite clickable'\n      src={data.sprites.front_default}\n      alt={data.name}\n      width='150px'\n      onClick={() => { onClick(data) }}\n    />\n  );\n};\n\nexport default Pokemon;\n","import React from 'react';\n\nimport './Selector.css';\nimport Pokemon from './Pokemon';\n\nconst Selector = ({ pokemon, select }) => {\n  return (\n    <div className='selector has-text-centered'>\n      <p>Pick your starter Pokemon:</p>\n      {pokemon.map(p => (\n        <Pokemon key={p.id} data={p} onClick={select} />\n      ))}\n    </div>\n  );\n};\n\nexport default Selector;\n","import React, { useState, useEffect } from 'react';\nimport Pokedex from 'pokedex-promise-v2';\n\nimport './Trainer.css';\nimport Pokemon from './Pokemon';\n\nconst Trainer = ({ pokemon, allPokemon }) => {\n  const P = new Pokedex();\n\n  const [species, setSpecies] = useState(pokemon.data);\n  const [fullyEvolved, setFullyEvolved] = useState(pokemon.fullyEvolved);\n  const [level, setLevel] = useState(pokemon.level);\n  const [exp, setExp] = useState(pokemon.exp);\n\n  // commits updates to Pokemon level and exp\n  useEffect(() => {\n    return () => {\n      const current = allPokemon.get(pokemon.id);\n      current.level = level;\n      current.exp = exp;\n    }\n  });\n\n  const trainPokemon = async () => {\n    const newExp = exp + 10;\n\n    if (newExp >= 100) {\n      const newLevel = level + 1;\n      if (newLevel >= 10 && !fullyEvolved) {\n        const currSpecies =\n          await P.getPokemonSpeciesByName(species.species.name);        \n        const evolutionChain =\n          await P.resource(currSpecies.evolution_chain.url);\n\n        let ptr = evolutionChain.chain;\n        while (ptr.species.name !== species.name && ptr.evolves_to.length) {\n          ptr = ptr.evolves_to[0];\n        }\n\n        const nextEvolution = await P.getPokemonByName(ptr.evolves_to[0].species.name);\n        console.log(nextEvolution);\n        setSpecies(nextEvolution);\n        setLevel(1);\n        setExp(0);\n      } else {\n        setLevel(newLevel);\n        setExp(newExp - 100);\n      }\n    } else {\n      setExp(newExp);\n    }\n  };\n\n  return (\n    <div className='trainer has-text-centered'>\n      <p>Click to train</p>\n      <Pokemon data={species} onClick={trainPokemon} />\n      <p>Lv{level}</p>\n      <label>EXP</label>\n      <progress\n        className='exp-bar progress is-info'\n        value={exp}\n        max='100'\n      >\n        {exp}\n      </progress>\n    </div>\n  );\n};\n\nexport default Trainer;\n","import React, { useState, useLayoutEffect } from 'react';\nimport Pokedex from 'pokedex-promise-v2';\nimport 'bulma/css/bulma.css';\n\nimport './App.css';\nimport Selector from './Selector';\nimport Trainer from './Trainer';\n\nconst App = () => {\n  const P = new Pokedex();\n\n  const [starters, setStarters] = useState([]);\n  const [active, setActive] = useState(null);\n  const [allPokemon] = useState(new Map());\n\n  const fetchStarters = async () => {\n    const starterNames = ['bulbasaur', 'charmander', 'squirtle',];\n    const starters = await Promise.all(\n      starterNames.map(s => P.getPokemonByName(s))\n    );\n    setStarters(starters);\n  };\n  useLayoutEffect(() => { fetchStarters() }, []);\n\n  const selectStarter = (pokemon) => {\n    allPokemon.set(0, { id: 0, level: 1, exp: 0, fullyEvolved: false, data: pokemon });\n    setActive(allPokemon.get(0));\n  };\n\n  return (\n    <div className=\"App container\">\n      <div className='main card'>\n        {active\n          ? <Trainer pokemon={active} allPokemon={allPokemon} />\n          : <Selector pokemon={starters} select={selectStarter} />         \n        }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}